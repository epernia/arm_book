Buenas, es una máquina de estados que se actualiza cuando el usuario llama a la función:

parserStatus_t parserUpdate(
    parser_t* instance, char const receivedChar )

La máquina de estados aplica sobre una variable de estructura con varios campos, de esta forma se puede usar para parsear muchas cosas. Como si cada estructura fuera un objeto parser. Entre los campos de esta estructura esta la variable de estados de la máquina.

Es la misma idea que la estructura de delay_t para el delay no bloqueante, con cada variable del tipo delay_t tengo un tiempo que corre en paralelo aparte.

Además la máquina de estados se puede controlar también desde las otras funciones para forzar un estado particular, como start y stop. La máquina hace su trabajo desde que la inicializan hasta que llega a un estado final, donde se queda allí hasta que la intervengan externamente.

La estructura:

typedef struct{
   parserStatus_t state;
   char const*    stringPattern;
   uint16_t       stringPatternLen;
   uint16_t       stringIndex;
   tick_t         timeout;
   delay_t        delay;
} parser_t;

parserStatus_t state; variable de estado del parser que instancio que sirve para recorrer la FSM.
char const* stringPattern; puntero al texto patrón a buscar en los caracteres que le voy enviando a la FSM de parseo.
uint16_t stringPatternLen; cantidad de caracteres del texto a parsear.
uint16_t stringIndex; índice actual del caracter que está esperando que le llegue el parser, o sea, el parser va chequeando cada caracter que le llega hasta que recibe ese caracter apuntado por el índice dentro de la cadena stringPattern, si le llega avanza ese índice, asi hasta que llega al final e indica que llegó la cadena deseada o si pasa el tiempo prefijado y no llega sale por tiemout.
tick_t timeout;el tiempo que le pone al delay no bloqueante que usa para determinar si llego el string patrón esperado dentro del tiempo deseado máximo. Entonces si no llega el string patrón dentro de este intervalo desde que se llama a la función parserStart() la FSM sale por timeout.
delay_t delay; La variable del dealy no bloqueante que utiliza para chequear el tiempo de timeout.

Entonces el uso es el siguiente (todas las funciones del módulo reciben al menos un puntero a la estructura parser_t para poder modificarla):
1 - Creo una variable del tipo parser_t
2 - Con parserInit() incicializo dicha variable cargándole todos los campos., el estado inicial es PARSER_STOPPED
3 - Con parserStart() arranco a ejecutar la FSM de parseo forzandola al estado PARSER_START.
4 - Me quedo ejecutando la funcion que actualiza la FSM de parseo parserUpdate() pasandole el nuevo caracter que llegó cada vez que la ejecuto o un caracter nulo, hay que ejcutarla aunque no llegue nada por uart para chequear el timeout. Hay que ejecutarla mientras esté en el estado PARSER_RECEIVING.
5 - La FSM avanza hasta que me dice que llegó la cadena patrón (se queda en el estado PARSER_PATTERN_MATCH) o que se venció el tiempo de timeout esperando dicha cadena: (se queda en el estado PARSER_TIMEOUT).

Está diseñada de forma que las cadenas patrones se puedan poner así por ejemplo:

"\r\nOK\r\n" vaya chequando si llego cada caracter y si no lo ingora, es decir: si llega \r avanza a esperar \n, si llega otra cosa en el medio la ignora, cuando llega \n avanza y espera 'O', ignora mugre hasta que llega 'O' y avanza a la 'K' y asi hasta el final.

Entonces por ejemplo, puedo parsear que me llegó "lo que sea \r\n lo que sea OK\r\n" con dicha cadena. De esta forma puedo eligiendo inteligentemente el stringPattern puedo chechqar que recibi todos los comandos de respuesta del módulo.

Espero que se entienda.

En el dibujo para salir de PARSER_STOPPED a PARSER_START deven llamar a la función parserStart() esa es la condicion de transición. Como el estado lo guarda la variable que está dentro de la estructura parser_t podria decir que cada variable de estructura parser_t que cree tiene una máquina de estados que corre de forma independiente, se entiende eso? o sea la funcion que actualiza la FSM sabe la lógica de cambios de estados junto con las otras que fuerzan el estado y yo le tengo que pasar sobre qué variable de estados se aplica (el campo stare de la estructura parser_t).

Para moverse entre los diferentes estados va a pasar mediante condiciones de transición de la funcion que actualiza la FSM (  parserUpdate() ) o mediante forzado externo ( parserInit(), parserStart() o parserStop())

Espero que eso aclare. Cualquier duda escribime.